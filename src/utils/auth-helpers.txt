This is the implement of authMiddleware.
It will check if the user has the required role and ownership.
If not, it will return a 403 error.
If the user has the required role and ownership, it will continue with the request.
If the user is not logged in, it will return a 401 error.
If the user is logged in, but the role is not found, it will return a 500 error.
If the user is logged in, but the ownership is not found, it will return a 500 error.
If the user is logged in, but the ownership is not found, it will return a 500 error.
If the user is logged in, but the ownership is not found, it will return a 500 error.
If the user is logged in, but the ownership is not found, it will return a 500 error.
If the user is logged in, but the ownership is not found, it will return a 500 error.
If the user is logged in, but the ownership is not found, it will return a 500 error.


on the main file if super-admin, then can access all routes.


import { getServerSession } from "next-auth";
import { authOptions } from "@/app/api/(auth)/auth/[...nextauth]/options";
import User from "@/models/userModel";
import { NextRequest, NextResponse } from "next/server";

// Check if user has required role
export async function checkUserRole(allowedRoles: string[]) {
  const session = await getServerSession(authOptions);
  if (!session?.user?.email) {
    return false;
  }

  const user = await User.findOne({ email: session.user.email });
  return user && user.role && allowedRoles.includes(user.role);
}

// Verify if the user is modifying their own data
export async function verifyUserOwnership(userIdentifier: string) {
  const session = await getServerSession(authOptions);
  if (!session?.user?.email) {
    return false;
  }

  const user = await User.findOne({ email: session.user.email });
  return user && (user.email === userIdentifier || user._id.toString() === userIdentifier);
}

// Combined middleware for role and ownership check
export async function authMiddleware(
  req: NextRequest,
  allowedRoles?: string[],
  checkOwnership: boolean = false,
  userIdentifier?: string
) {
  try {
    // 1. Check roles if specified
    if (allowedRoles && allowedRoles.length > 0) {
      const hasRole = await checkUserRole(allowedRoles);
      if (!hasRole) {
        return NextResponse.json(
          { error: "Permission denied" },
          { status: 403 }
        );
      }
    }

    // 2. Check ownership if required
    if (checkOwnership && userIdentifier) {
      const isOwner = await verifyUserOwnership(userIdentifier);
      if (!isOwner) {
        return NextResponse.json(
          { error: "You can only modify your own data" },
          { status: 403 }
        );
      }
    }

    return null; // No error, continue with the request
  } catch (error: unknown) {
    if (error instanceof Error) {
      return NextResponse.json(
        { error: error.message },
        { status: 500 }
      );
    }
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}